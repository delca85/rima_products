{"version":3,"sources":["types/graphql.generated.ts","common/Home.tsx","apollo/client.ts","apollo/RimaApolloProvider.tsx","common/Loading.tsx","macro-product/MacroProduct.tsx","subparts/Cell.tsx","subparts/CellImg.tsx","subparts/Subpart.tsx","subparts/SubpartsTableHeader.tsx","subparts/SubpartsTable.tsx","macro-product/MacroProductContainer.tsx","App.tsx","index.tsx"],"names":["tCacheControlScope","Home","className","buildApolloClient","cache","InMemoryCache","ApolloClient","uri","RimaApolloProvider","children","client","useMemo","PartsDocument","gql","Loading","MacroProduct","styled","id","name","thumb","src","alt","Cell","text","header","CellImg","altText","Subpart","quantity","SubpartsTableHeader","headings","map","heading","index","key","SUBPARTS_TABLE_HEADINGS","SubpartsTable","subparts","length","MacroProductContainer","baseOptions","paramId","useParams","Number","variables","Apollo","data","loading","error","part","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2dae1ad.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type tPart = {\n  __typename?: 'Part';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  thumb?: Maybe<Scalars['String']>;\n  quantity?: Maybe<Scalars['Int']>;\n  subparts?: Maybe<Array<tPart>>;\n  parentId?: Maybe<Scalars['Int']>;\n};\n\nexport type tQuery = {\n  __typename?: 'Query';\n  parts: Array<tPart>;\n  part?: Maybe<tPart>;\n  macroProducts: Array<tMacroProduct>;\n  macroProduct?: Maybe<tMacroProduct>;\n};\n\n\nexport type tQueryPartArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type tQueryMacroProductArgs = {\n  id: Scalars['Int'];\n};\n\nexport type tMacroProduct = {\n  __typename?: 'MacroProduct';\n  id: Scalars['Int'];\n  parentPartNo: Scalars['Int'];\n  childPartNo: Scalars['Int'];\n  quantity: Scalars['Int'];\n};\n\nexport enum tCacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type tPartsQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type tPartsQuery = { __typename?: 'Query', part?: Maybe<{ __typename?: 'Part', id: number, name: string, thumb?: Maybe<string>, subparts?: Maybe<Array<{ __typename?: 'Part', id: number, name: string, thumb?: Maybe<string>, quantity?: Maybe<number> }>> }> };\n\n\nexport const PartsDocument = gql`\n    query Parts($id: Int!) {\n  part(id: $id) {\n    id\n    name\n    thumb\n    subparts {\n      id\n      name\n      thumb\n      quantity\n    }\n  }\n}\n    `;\nexport function usePartsQuery(baseOptions?: Apollo.QueryHookOptions<tPartsQuery, tPartsQueryVariables>) {\n        return Apollo.useQuery<tPartsQuery, tPartsQueryVariables>(PartsDocument, baseOptions);\n      }\nexport function usePartsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<tPartsQuery, tPartsQueryVariables>) {\n          return Apollo.useLazyQuery<tPartsQuery, tPartsQueryVariables>(PartsDocument, baseOptions);\n        }\nexport type PartsQueryHookResult = ReturnType<typeof usePartsQuery>;\nexport type PartsLazyQueryHookResult = ReturnType<typeof usePartsLazyQuery>;\nexport type PartsQueryResult = Apollo.QueryResult<tPartsQuery, tPartsQueryVariables>;","import { default as React } from 'react';\nimport { IRimaComponentProps } from '../types/component.types';\n\nconst Home = ({ className }: IRimaComponentProps) => (\n  <div className={className}>\n    <span>Under construction...</span>\n  </div>\n);\n\nexport default Home;\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\n// import { getEnvironmentConfiguration } from '../configuration/environmentConfiguration';\n\nconst buildApolloClient = () => {\n  // const { graphql } = getEnvironmentConfiguration();\n  const cache = new InMemoryCache();\n\n  return new ApolloClient({\n    uri:  '/.netlify/functions/graphql',\n    cache,\n  });\n};\n\nexport default buildApolloClient;\n","import { default as React, useMemo } from 'react';\nimport { ApolloProvider } from '@apollo/client';\nimport buildApolloClient from './client';\nimport { IRimaComponentProps } from '../types/component.types';\n\nconst RimaApolloProvider = ({ children }: IRimaComponentProps) => {\n  const client = useMemo(() => buildApolloClient(), []);\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n\nexport default RimaApolloProvider;\n","import { default as React } from 'react';\nimport { IRimaComponentProps } from '../types/component.types';\n\nconst Loading = ({ className }: IRimaComponentProps) => <div className={className}>Loading...</div>;\n\nexport default Loading;\n","import { default as React } from 'react';\nimport styled from 'styled-components';\nimport { IPartComponentProps } from '../types/component.types';\n\nconst MacroProductRaw = ({ className, id, name, thumb = '' }: IPartComponentProps) => (\n  <div className={className}>\n    <h2 className=\"macro-product-name\">{name}</h2>\n    <img src={thumb} alt={`Product with id: ${id}`} />\n  </div>\n);\n\nconst MacroProduct = styled(MacroProductRaw)`\n  text-align: center;\n  text-transform: capitalize;\n`;\n\nexport default MacroProduct;\n","import { default as React } from 'react';\nimport styled from 'styled-components';\nimport { IRimaComponentProps } from '../types/component.types';\n\nexport interface ICellProps extends IRimaComponentProps {\n  text?: string | number;\n  header?: boolean;\n  img?: boolean;\n}\n\nconst CellRaw = ({ className, text, header = false }: ICellProps) => {\n  return header ? <th className={className}>{text}</th> : <td className={className}>{text}</td>;\n};\n\nconst Cell = styled(CellRaw)`\n  vertical-align: middle;\n  border: 1px solid #f4f6f8;\n  padding: 4px;\n  max-width: 200px;\n  text-align: left;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\nexport default Cell;\n","import { default as React } from 'react';\nimport styled from 'styled-components';\nimport { IRimaComponentProps } from '../types/component.types';\n\nexport interface ICellImgProps extends IRimaComponentProps {\n  src?: string;\n  altText: string;\n}\n\nconst CellImgRaw = ({ className, src, altText }: ICellImgProps) => {\n  if (src) {\n    return (\n      <td className={className}>\n        <img src={src} alt={altText} />\n      </td>\n    );\n  }\n  return <td className={className}></td>;\n};\n\nconst CellImg = styled(CellImgRaw)`\n  vertical-align: middle;\n  border: 1px solid #f4f6f8;\n  padding: 4px;\n  max-width: 45px;\n  text-align: left;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  img {\n    width: 100%;\n  }\n`;\nexport default CellImg;\n","import { default as React } from 'react';\nimport { IPartComponentProps } from '../types/component.types';\nimport Cell from './Cell';\nimport CellImg from './CellImg';\n\nconst Subpart = ({ className, id, name, thumb, quantity = 1 }: IPartComponentProps) => {\n  return (\n    <tr className={className}>\n      <Cell text={id} />\n      <Cell text={name} />\n      <Cell text={quantity} />\n      <CellImg src={thumb} altText={`Subpart with id: ${id}`} />\n    </tr>\n  );\n};\n\nexport default Subpart;\n","import { default as React } from 'react';\nimport { IRimaComponentProps } from '../types/component.types';\nimport Cell from './Cell';\n\nexport interface ISubpartsTableHeaderProps extends IRimaComponentProps {\n  headings: string[];\n}\nconst SubpartsTableHeader = ({ headings }: ISubpartsTableHeaderProps) => (\n  <tr>\n    {headings.map((heading, index) => (\n      <Cell header key={`${heading}-${index}`} text={heading} />\n    ))}\n  </tr>\n);\n\nexport default SubpartsTableHeader;\n","import { default as React } from 'react';\nimport styled from 'styled-components';\nimport { IPartComponentProps, IRimaComponentProps } from '../types/component.types';\nimport Subpart from './Subpart';\nimport SubpartsTableHeader from './SubpartsTableHeader';\n\nexport interface ISubpartsTableProps extends IRimaComponentProps {\n  subparts: IPartComponentProps[];\n}\n\nconst SUBPARTS_TABLE_HEADINGS = ['id', 'name', 'quantity', 'image'];\nexport const SUBPARTS_TABLE_TITLE = 'Subparts';\n\nconst SubpartsTableRaw = ({ className, subparts }: ISubpartsTableProps) =>\n  subparts.length ? (\n    <div className={className}>\n      <div className=\"scroll-container\">\n        <h2>{SUBPARTS_TABLE_TITLE}</h2>\n        <table className=\"table\">\n          <thead>\n            <SubpartsTableHeader headings={SUBPARTS_TABLE_HEADINGS} />\n          </thead>\n          <tbody>\n            {subparts.map(({ id, name, quantity, thumb }) => (\n              <Subpart key={id} id={id} name={name} quantity={quantity} thumb={thumb} />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  ) : null;\nconst SubpartsTable = styled(SubpartsTableRaw)`\n  max-width: 100vw;\n  .scroll-container {\n    overflow-x: auto;\n  }\n  .table {\n    border-spacing: 0px;\n    background: #fff;\n    box-shadow: 0 1px 0 0 rgba(22, 29, 37, 0.05);\n    /* width: 100%; */\n  }\n`;\n\nexport default SubpartsTable;\n","import { default as React } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { usePartsQuery } from '../types/graphql.generated';\nimport { IRouteParams } from '../types/router.types';\nimport { IRimaComponentProps } from '../types/component.types';\nimport Loading from '../common/Loading';\nimport MacroProduct from './MacroProduct';\nimport SubpartsTable from '../subparts/SubpartsTable';\n\nconst MacroProductContainerRaw = ({ className }: IRimaComponentProps) => {\n  const { id: paramId } = useParams<IRouteParams>();\n  const id = Number(paramId);\n\n  const { data, loading, error } = usePartsQuery({\n    variables: { id },\n  });\n\n  if (loading) return <Loading />;\n\n  if (error || !data || !data.part) return <div>Error...</div>;\n\n  const { part } = data;\n  const subparts = part.subparts || [];\n  const thumb = part.thumb || '';\n\n  return (\n    <div className={className}>\n      <MacroProduct className=\"macro-product\" id={id} name={part.name} thumb={thumb} />\n      <SubpartsTable className=\"subparts-table\" subparts={subparts} />\n    </div>\n  );\n};\n\nconst MacroProductContainer = styled(MacroProductContainerRaw)`\n  display: flex;\n  justify-content: space-around;\n`;\n\nexport default MacroProductContainer;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './common/Home';\nimport RimaApolloProvider from './apollo/RimaApolloProvider';\nimport MacroProductContainer from './macro-product/MacroProductContainer';\nconst App = () => (\n  <RimaApolloProvider>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/macro_product/:id\">\n          <MacroProductContainer />\n        </Route>\n        <Route path=\"/\">\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </RimaApolloProvider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}